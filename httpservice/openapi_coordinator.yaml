openapi: 3.0.3
info:
  title: GraphScope FLEX HTTP SERVICE API
  description: |-
    This is a specification for GraphScope FLEX HTTP service based on the OpenAPI 3.0 specification. You can find out more details about
    specification at [doc](https://swagger.io/specification/v3/).
    
    Some useful links:
    - [GraphScope Repository](https://github.com/alibaba/GraphScope)
    - [The Source API definition for GraphScope Interactive](https://github.com/GraphScope/portal/tree/main/httpservice)
  contact:
    name: GraphScope
    email: graphscope@alibaba-inc.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.9.1
externalDocs:
  description: Find out More about GraphScope
  url: http://graphscope.io
paths:
  /api/v1/connection:
    post:
      tags:
        - connection
      description: Connect to coordinator service
      operationId: connect
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Connection'
        required: true
      responses:
        '200':
          description: Connect coordinator service successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionStatus'
    delete:
      tags:
        - connection
      description: Close the connection with coordinator
      operationId: close
      responses:
        '200':
          description: Close connection successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/v1/graph:
    post:
      tags:
        - graph
      description: Create a new graph
      operationId: create_graph
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Graph'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
    get:
      tags:
        - graph
      description: List all graphs
      operationId: list_graphs
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Graph'
  /api/v1/graph/{graph_name}:
    delete:
      tags:
        - graph
      description: Delete a graph by name
      operationId: delete_graph
      parameters:
        - name: graph_name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/v1/graph/{graph_name}/schema:
    get:
      tags:
        - graph
      description: Get graph schema by name
      operationId: get_schema
      parameters:
        - name: graph_name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schema'
  /api/v1/graph/{graph_name}/schema/vertex_type:
    post:
      tags:
        - graph
      description: Create a vertex type
      operationId: create_vertex_type
      parameters:
        - name: graph_name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VertexType'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/v1/graph/{graph_name}/schema/vertex_type/{type_name}:
    delete:
      tags:
        - graph
      description: Delete a vertex type by name
      operationId: delete_vertex_type
      parameters:
        - name: graph_name
          in: path
          required: true
          schema:
            type: string
        - name: type_name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/v1/graph/{graph_name}/schema/edge_type:
    post:
      tags:
        - graph
      description: Create a edge type
      operationId: create_edge_type
      parameters:
        - name: graph_name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EdgeType'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/v1/graph/{graph_name}/schema/edge_edge/{type_name}:
    delete:
      tags:
        - graph
      description: Delete a edge type by name
      operationId: delete_edge_type
      parameters:
        - name: graph_name
          in: path
          required: true
          schema:
            type: string
        - name: type_name
          in: path
          required: true
          schema:
            type: string
        - name: source_vertex_type
          in: query
          required: true
          schema:
            type: string
        - name: destination_vertex_type
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/v1/groot/graph:
    get:
      tags:
        - legacy
      description: list groot graph
      operationId: list_groot_graph
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GrootGraph'
  /api/v1/groot/graph/{graph_name}/schema:
    post:
      tags:
        - legacy
      description: Import schema to groot graph
      operationId: import_schema
      parameters:
        - name: graph_name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GrootSchema'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
    get:
      tags:
        - legacy
      description: Get graph schema by name
      operationId: get_groot_schema
      parameters:
        - name: graph_name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GrootSchema'
  /api/v1/procedure:
    get:
      tags:
        - procedure
      description: List all the stored procedures
      operationId: list_procedures
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Procedure'
  /api/v1/graph/{graph_name}/procedure:
    post:
      tags:
        - procedure
      description: Create a new stored procedure on a certain graph
      operationId: create_procedure
      parameters:
      - name: graph_name
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Procedure'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
    get:
      tags:
        - procedure
      description: List stored procedures on a certain graph
      operationId: list_procedures_by_graph
      parameters:
      - name: graph_name
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Procedure'
  /api/v1/graph/{graph_name}/procedure/{procedure_name}:
    put:
      tags:
        - procedure
      description:  Update srored procedure on a certain graph
      operationId: update_procedure
      parameters:
      - name: graph_name
        in: path
        required: true
        schema:
          type: string
      - name: procedure_name
        in : path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Procedure'
      responses:
        '200':
           description: Successful operation
           content:
             application/json:
               schema:
                  $ref: '#/components/schemas/ApiResponse'
    delete:
      tags:
        - procedure
      description: Delete a stored procedure on a certain graph
      operationId: delete_procedure
      parameters:
        - name: graph_name
          in: path
          required: true
          schema:
            type: string
        - name: procedure_name
          in : path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/v1/deployment/info:
    get:
      tags:
        - deployment
      description: Get deployment's meta info
      operationId: get_deployment_info
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentInfo'
  /api/v1/deployment/status:
    get:
      tags:
        - deployment
      description: Get deployment's status (k8s only)
      operationId: get_deployment_status
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeploymentStatus'
  /api/v1/node/status:
    get:
      tags:
        - deployment
      description: Get node status (cpu/memory/disk)
      operationId: get_node_status
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NodeStatus'
  /api/v1/service/start:
    post:
      tags:
        - service
      description: Start service
      operationId: start_service
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                graph_name:
                  type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/v1/service/stop:
    post:
      tags:
        - service
      description: Stop current service
      operationId: stop_service
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/v1/service/restart:
    post:
      tags:
        - service
      description: Restart current service
      operationId: restart_service
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/v1/service/status:
    get:
      tags:
        - service
      description: Get service status
      operationId: get_service_status
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceStatus'
components:
  schemas:
    ApiResponse:
      type: string
    Connection:
      x-body-name: connection
      type: object
      properties:
        coordinator_endpoint:
          type: string
    ConnectionStatus:
        x-body-name: connection_status
        type: object
        properties:
          status:
            type: string
            enum:
              - CONNECTED
          solution:
            type: string
            enum:
              - INTERACTIVE
              - GRAPHSCOPE_INSIGHT
    Graph:
      x-body-name: graph
      type: object
      properties:
        name:
          type: string
        store_type:
          type: string
          enum:
            - mutable_csr
        stored_procedures:
          type: object
          properties:
            directory:
              type: string
              enum:
                - plugins
        schema:
          $ref: '#/components/schemas/Schema'
    Schema:
      x-body-name: schema
      type: object
      properties:
        vertex_types:
          type: array
          items:
            $ref: '#/components/schemas/VertexType'
        edge_types:
          type: array
          items:
            $ref: '#/components/schemas/EdgeType'
    VertexType:
      x-body-name: vertex_type
      type: object
      properties:
        type_id:
          type: integer
          format: int32
        type_name:
          type: string
        properties:
          type: array
          items:
            $ref: '#/components/schemas/Property'
        primary_keys:
          type: array
          items:
            type: string
    EdgeType:
      x-body-name: edge_type
      type: object
      properties:
        type_id:
          type: integer
          format: int32
        type_name:
          type: string
        vertex_type_pair_relations:
          type: array
          items:
            type: object
            properties:
              source_vertex:
                type: string
              destination_vertex:
                type: string
              relation:
                type: string
                enum:
                  - MANY_TO_MANY
                  - ONE_TO_MANY
                  - MANY_TO_ONE
                  - ONE_TO_ONE
              x_csr_params:
                type: object
                description: Used for storage optimization
                properties:
                  edge_storage_strategy:
                    type: string
                    enum:
                      - ONLY_IN
                      - ONLY_OUT
                      - BOTH_OUT_IN
        properties:
          type: array
          items:
            $ref: '#/components/schemas/Property'
    Property:
      x-body-name: property
      type: object
      properties:
        property_id:
          type: integer
          format: int32
        property_name:
          type: string
        property_type:
          type: object
          properties:
            primitive_type:
              type: string
              enum:
                - DT_DOUBLE
                - DT_STRING
                - DT_SIGNED_INT32
                - DT_SIGNED_INT64
                - DT_DATE32
    Procedure:
      x-body-name: procedure
      type: object
      properties:
        name:
          type: string
        bound_graph:
          type: string
        description:
          type: string
        type:
          type: string
          enum:
           - cpp
           - cypher
        query:
          type: string
        enable:
          type: boolean
        params:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              type:
                type: string
        returns:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              type:
                type: string
    DeploymentInfo:
      x-body-name: deployment_info
      type: object
      properties:
        name:
          type: string
        cluster_type:
          type: string
          enum:
            - HOSTS
            - KUBERNETES
        version:
          type: string
    DeploymentStatus:
      x-body-name: deployment_status
      type: object
      properties:
        name:
          type: string
        image:
          type: string
        labels:
          description: json string
          type: string
        node:
          type: string
        status:
          type: string
        restart_count:
          type: integer
          format: int32
        cpu_usage:
          type: integer
          format: int32
        memory_usage:
          type: integer
          format: int32
        timestamp:
          type: string
        creation_time:
          type: string
    NodeStatus:
      x-body-name: node_status
      type: object
      properties:
        node:
          type: string
        cpu_usage:
          type: integer
          format: int32
        memory_usage:
          type: integer
          format: int32
        disk_usage:
          type: integer
          format: int32
    ServiceStatus:
      x-body-name: service_status
      type: object
      properties:
        status:
          type: string
        graph_name:
          description: which graph is serving now
          type: string
        sdk_endpoints:
          type: object
          properties:
            cypher:
              type: string
            gremlin:
              type: string
            hqps:
              type: string
            grpc:
              type: string
    GrootGraph:
      x-body-name: groot_graph
      type: object
      properties:
        name:
          type: string
        directed:
          type: boolean
        creation_time:
          type: string
        schema:
          $ref: '#/components/schemas/GrootSchema'
        gremlin_interface:
          type: object
          properties:
            gremlin_endpoint:
              type: string
            grpc_endpoint:
              type: string
            username:
              type: string
            password:
              type: string
    GrootSchema:
      x-body-name: groot_schema
      type: object
      properties:
        vertices:
          type: array
          items:
            $ref: '#/components/schemas/GrootVertexType'
        edges:
          type: array
          items:
            $ref: '#/components/schemas/GrootEdgeType'
    GrootVertexType:
      x-body-name: groot_vertex_type
      type: object
      properties:
        label:
          type: string
        properties:
          type: array
          items:
            $ref: '#/components/schemas/GrootProperty'
    GrootEdgeType:
      x-body-name: groot_edge_type
      type: object
      properties:
        label:
          type: string
        relations:
          type: array
          items:
            type: object
            properties:
              src_label:
                type: string
              dst_label:
                type: string
        properties:
          type: array
          items:
            $ref: '#/components/schemas/GrootProperty'
    GrootProperty:
      x-body-name: groot_property
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        type:
          type: string
          enum:
            - STRING
            - LONG
            - DOUBLE
        is_primary_key:
          type: boolean