/* tslint:disable */
/* eslint-disable */
/**
 * GraphScope FLEX HTTP SERVICE API
 * This is a specification for GraphScope FLEX HTTP service based on the OpenAPI 3.0 specification. You can find out more details about specification at [doc](https://swagger.io/specification/v3/).  Some useful links: - [GraphScope Repository](https://github.com/alibaba/GraphScope) - [The Source API definition for GraphScope Interactive](https://github.com/GraphScope/portal/tree/main/httpservice)
 *
 * OpenAPI spec version: 0.9.1
 * Contact: graphscope@alibaba-inc.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ApiResponse } from '../models';
import { EdgeType } from '../models';
import { Graph } from '../models';
import { Schema } from '../models';
import { VertexType } from '../models';
/**
 * GraphApi - axios parameter creator
 * @export
 */
export const GraphApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a edge type
         * @param {EdgeType} body 
         * @param {string} graphName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEdgeType: async (body: EdgeType, graphName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createEdgeType.');
            }
            // verify required parameter 'graphName' is not null or undefined
            if (graphName === null || graphName === undefined) {
                throw new RequiredError('graphName','Required parameter graphName was null or undefined when calling createEdgeType.');
            }
            const localVarPath = `/api/v1/graph/{graph_name}/schema/edge`
                .replace(`{${"graph_name"}}`, encodeURIComponent(String(graphName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new graph
         * @param {Graph} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGraph: async (body: Graph, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createGraph.');
            }
            const localVarPath = `/api/v1/graph`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a vertex type
         * @param {VertexType} body 
         * @param {string} graphName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVertexType: async (body: VertexType, graphName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createVertexType.');
            }
            // verify required parameter 'graphName' is not null or undefined
            if (graphName === null || graphName === undefined) {
                throw new RequiredError('graphName','Required parameter graphName was null or undefined when calling createVertexType.');
            }
            const localVarPath = `/api/v1/graph/{graph_name}/schema/vertex`
                .replace(`{${"graph_name"}}`, encodeURIComponent(String(graphName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a edge type by name
         * @param {string} graphName 
         * @param {string} labelName 
         * @param {string} sourceVertexType 
         * @param {string} destinationVertexType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEdgebyName: async (graphName: string, labelName: string, sourceVertexType: string, destinationVertexType: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'graphName' is not null or undefined
            if (graphName === null || graphName === undefined) {
                throw new RequiredError('graphName','Required parameter graphName was null or undefined when calling deleteEdgebyName.');
            }
            // verify required parameter 'labelName' is not null or undefined
            if (labelName === null || labelName === undefined) {
                throw new RequiredError('labelName','Required parameter labelName was null or undefined when calling deleteEdgebyName.');
            }
            // verify required parameter 'sourceVertexType' is not null or undefined
            if (sourceVertexType === null || sourceVertexType === undefined) {
                throw new RequiredError('sourceVertexType','Required parameter sourceVertexType was null or undefined when calling deleteEdgebyName.');
            }
            // verify required parameter 'destinationVertexType' is not null or undefined
            if (destinationVertexType === null || destinationVertexType === undefined) {
                throw new RequiredError('destinationVertexType','Required parameter destinationVertexType was null or undefined when calling deleteEdgebyName.');
            }
            const localVarPath = `/api/v1/graph/{graph_name}/schema/edge/{label_name}`
                .replace(`{${"graph_name"}}`, encodeURIComponent(String(graphName)))
                .replace(`{${"label_name"}}`, encodeURIComponent(String(labelName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sourceVertexType !== undefined) {
                localVarQueryParameter['source_vertex_type'] = sourceVertexType;
            }

            if (destinationVertexType !== undefined) {
                localVarQueryParameter['destination_vertex_type'] = destinationVertexType;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a graph by graph name
         * @param {string} graphName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGraphbyName: async (graphName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'graphName' is not null or undefined
            if (graphName === null || graphName === undefined) {
                throw new RequiredError('graphName','Required parameter graphName was null or undefined when calling deleteGraphbyName.');
            }
            const localVarPath = `/api/v1/graph/{graph_name}`
                .replace(`{${"graph_name"}}`, encodeURIComponent(String(graphName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a vertex type by name
         * @param {string} graphName 
         * @param {string} labelName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVertexbyName: async (graphName: string, labelName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'graphName' is not null or undefined
            if (graphName === null || graphName === undefined) {
                throw new RequiredError('graphName','Required parameter graphName was null or undefined when calling deleteVertexbyName.');
            }
            // verify required parameter 'labelName' is not null or undefined
            if (labelName === null || labelName === undefined) {
                throw new RequiredError('labelName','Required parameter labelName was null or undefined when calling deleteVertexbyName.');
            }
            const localVarPath = `/api/v1/graph/{graph_name}/schema/vertex/{label_name}`
                .replace(`{${"graph_name"}}`, encodeURIComponent(String(graphName)))
                .replace(`{${"label_name"}}`, encodeURIComponent(String(labelName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List all graphs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchema: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/graph/{graph_name}/schema`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Import schema to graph
         * @param {Schema} body 
         * @param {string} graphName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importSchema: async (body: Schema, graphName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling importSchema.');
            }
            // verify required parameter 'graphName' is not null or undefined
            if (graphName === null || graphName === undefined) {
                throw new RequiredError('graphName','Required parameter graphName was null or undefined when calling importSchema.');
            }
            const localVarPath = `/api/v1/graph/{graph_name}/schema`
                .replace(`{${"graph_name"}}`, encodeURIComponent(String(graphName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List all graphs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGraphs: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/graph`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GraphApi - functional programming interface
 * @export
 */
export const GraphApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create a edge type
         * @param {EdgeType} body 
         * @param {string} graphName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEdgeType(body: EdgeType, graphName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ApiResponse>>> {
            const localVarAxiosArgs = await GraphApiAxiosParamCreator(configuration).createEdgeType(body, graphName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new graph
         * @param {Graph} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGraph(body: Graph, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ApiResponse>>> {
            const localVarAxiosArgs = await GraphApiAxiosParamCreator(configuration).createGraph(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a vertex type
         * @param {VertexType} body 
         * @param {string} graphName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createVertexType(body: VertexType, graphName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ApiResponse>>> {
            const localVarAxiosArgs = await GraphApiAxiosParamCreator(configuration).createVertexType(body, graphName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a edge type by name
         * @param {string} graphName 
         * @param {string} labelName 
         * @param {string} sourceVertexType 
         * @param {string} destinationVertexType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEdgebyName(graphName: string, labelName: string, sourceVertexType: string, destinationVertexType: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ApiResponse>>> {
            const localVarAxiosArgs = await GraphApiAxiosParamCreator(configuration).deleteEdgebyName(graphName, labelName, sourceVertexType, destinationVertexType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a graph by graph name
         * @param {string} graphName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGraphbyName(graphName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ApiResponse>>> {
            const localVarAxiosArgs = await GraphApiAxiosParamCreator(configuration).deleteGraphbyName(graphName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a vertex type by name
         * @param {string} graphName 
         * @param {string} labelName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteVertexbyName(graphName: string, labelName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ApiResponse>>> {
            const localVarAxiosArgs = await GraphApiAxiosParamCreator(configuration).deleteVertexbyName(graphName, labelName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List all graphs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSchema(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Schema>>> {
            const localVarAxiosArgs = await GraphApiAxiosParamCreator(configuration).getSchema(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Import schema to graph
         * @param {Schema} body 
         * @param {string} graphName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async importSchema(body: Schema, graphName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ApiResponse>>> {
            const localVarAxiosArgs = await GraphApiAxiosParamCreator(configuration).importSchema(body, graphName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List all graphs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listGraphs(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Graph>>>> {
            const localVarAxiosArgs = await GraphApiAxiosParamCreator(configuration).listGraphs(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * GraphApi - factory interface
 * @export
 */
export const GraphApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create a edge type
         * @param {EdgeType} body 
         * @param {string} graphName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEdgeType(body: EdgeType, graphName: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ApiResponse>> {
            return GraphApiFp(configuration).createEdgeType(body, graphName, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new graph
         * @param {Graph} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGraph(body: Graph, options?: AxiosRequestConfig): Promise<AxiosResponse<ApiResponse>> {
            return GraphApiFp(configuration).createGraph(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a vertex type
         * @param {VertexType} body 
         * @param {string} graphName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createVertexType(body: VertexType, graphName: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ApiResponse>> {
            return GraphApiFp(configuration).createVertexType(body, graphName, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a edge type by name
         * @param {string} graphName 
         * @param {string} labelName 
         * @param {string} sourceVertexType 
         * @param {string} destinationVertexType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEdgebyName(graphName: string, labelName: string, sourceVertexType: string, destinationVertexType: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ApiResponse>> {
            return GraphApiFp(configuration).deleteEdgebyName(graphName, labelName, sourceVertexType, destinationVertexType, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a graph by graph name
         * @param {string} graphName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGraphbyName(graphName: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ApiResponse>> {
            return GraphApiFp(configuration).deleteGraphbyName(graphName, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a vertex type by name
         * @param {string} graphName 
         * @param {string} labelName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteVertexbyName(graphName: string, labelName: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ApiResponse>> {
            return GraphApiFp(configuration).deleteVertexbyName(graphName, labelName, options).then((request) => request(axios, basePath));
        },
        /**
         * List all graphs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSchema(options?: AxiosRequestConfig): Promise<AxiosResponse<Schema>> {
            return GraphApiFp(configuration).getSchema(options).then((request) => request(axios, basePath));
        },
        /**
         * Import schema to graph
         * @param {Schema} body 
         * @param {string} graphName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async importSchema(body: Schema, graphName: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ApiResponse>> {
            return GraphApiFp(configuration).importSchema(body, graphName, options).then((request) => request(axios, basePath));
        },
        /**
         * List all graphs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listGraphs(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Graph>>> {
            return GraphApiFp(configuration).listGraphs(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GraphApi - object-oriented interface
 * @export
 * @class GraphApi
 * @extends {BaseAPI}
 */
export class GraphApi extends BaseAPI {
    /**
     * Create a edge type
     * @param {EdgeType} body 
     * @param {string} graphName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    public async createEdgeType(body: EdgeType, graphName: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ApiResponse>> {
        return GraphApiFp(this.configuration).createEdgeType(body, graphName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new graph
     * @param {Graph} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    public async createGraph(body: Graph, options?: AxiosRequestConfig) : Promise<AxiosResponse<ApiResponse>> {
        return GraphApiFp(this.configuration).createGraph(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a vertex type
     * @param {VertexType} body 
     * @param {string} graphName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    public async createVertexType(body: VertexType, graphName: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ApiResponse>> {
        return GraphApiFp(this.configuration).createVertexType(body, graphName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a edge type by name
     * @param {string} graphName 
     * @param {string} labelName 
     * @param {string} sourceVertexType 
     * @param {string} destinationVertexType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    public async deleteEdgebyName(graphName: string, labelName: string, sourceVertexType: string, destinationVertexType: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ApiResponse>> {
        return GraphApiFp(this.configuration).deleteEdgebyName(graphName, labelName, sourceVertexType, destinationVertexType, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a graph by graph name
     * @param {string} graphName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    public async deleteGraphbyName(graphName: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ApiResponse>> {
        return GraphApiFp(this.configuration).deleteGraphbyName(graphName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a vertex type by name
     * @param {string} graphName 
     * @param {string} labelName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    public async deleteVertexbyName(graphName: string, labelName: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ApiResponse>> {
        return GraphApiFp(this.configuration).deleteVertexbyName(graphName, labelName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List all graphs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    public async getSchema(options?: AxiosRequestConfig) : Promise<AxiosResponse<Schema>> {
        return GraphApiFp(this.configuration).getSchema(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Import schema to graph
     * @param {Schema} body 
     * @param {string} graphName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    public async importSchema(body: Schema, graphName: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ApiResponse>> {
        return GraphApiFp(this.configuration).importSchema(body, graphName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List all graphs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphApi
     */
    public async listGraphs(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Graph>>> {
        return GraphApiFp(this.configuration).listGraphs(options).then((request) => request(this.axios, this.basePath));
    }
}
